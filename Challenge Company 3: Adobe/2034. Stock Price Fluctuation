/*
Idea:
We use a map stock to store the current price for each timestamp.
We also need a multiset prices to store all the prices we had so far.
To get the latest, we keep a variable latest for the latest timestamp.

update:
If we had this timestamp already and we're correcting the previous price so we need to remove it from prices.
Then we update stock, prices and latest.
current:
just return the price at the latest timestamp.
maximum and minimum:
a multiset is always sorted, so we just return the first and last elements.
Time Complexity: O(logn) for update, O(1) for the rest
Space Complexity: O(n)
*/
// Did a mistake here is that i misunderstood what latest is
// It is not the latest price we get it is the latest timestamp we get and the price on it.
class StockPrice {
public:
    map<int,int> stock;
    multiset<int> prices;
    int latest=0;
    
    StockPrice() {}
    
    void update(int timestamp, int price) {
        if(stock.count(timestamp)){
           prices.erase(prices.find(stock[timestamp]));
        }
        stock[timestamp]=price;
        prices.insert(price);
        latest=max(latest,timestamp);
    }
    
    int current() {
        return stock[latest];
    }
    
    int maximum() {
        return *prices.rbegin();
    }
    
    int minimum() {
        return *prices.begin();
    }
};

/**
 * Your StockPrice object will be instantiated and called as such:
 * StockPrice* obj = new StockPrice();
 * obj->update(timestamp,price);
 * int param_2 = obj->current();
 * int param_3 = obj->maximum();
 * int param_4 = obj->minimum();
 */
