/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/* 
Brute-force method simply
*/
/*
class Solution {
public:
    int total_count=0;
    void solver(TreeNode* root,int& sum,int& count){
        if(root==NULL){return ;}
        solver(root->left,sum,count);
        sum+=(root->val);
        count++;
        solver(root->right,sum,count);
    }
    void helper(TreeNode* root){
        if(root==NULL){
            return ;
        }
        helper(root->left);
        int sum=0;
        int count=0;
        solver(root,sum,count);
        if((sum/count)==root->val){
            total_count++;
        }
        helper(root->right);
    }
    int averageOfSubtree(TreeNode* root) {
        helper(root);
        return total_count;
    }
};

*/

/* 
More optimized O(n)
Here we will store sum and count of its subtree along with the node.
Dry run it you will get it.
*/
class Solution {
public:
    struct node{
        int sum;
        int count;
    };
    int total_count=0;
    node solver(TreeNode* root){
        if(root==NULL){return {0,0};}
        node left=solver(root->left);
        node right=solver(root->right);
        node curr={left.sum+right.sum+root->val,left.count+right.count+1};
        if(curr.sum/curr.count==root->val){
            total_count++;
        }
        return curr;
    }
    int averageOfSubtree(TreeNode* root) {
        solver(root);
        return total_count;
    }
};


