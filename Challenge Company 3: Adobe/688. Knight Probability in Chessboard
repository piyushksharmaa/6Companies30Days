class Solution {
public:
    bool isValid(int x,int y,int n){
        if(x>=0 and y>=0 and x<n and y<n){
            return true;
        }
        return false;
    }
    double knightProbability(int n, int k, int row, int column) {
        vector<vector<double>> curr(n,vector<double>(n,0));
        vector<vector<double>> next(n,vector<double>(n,0));
        curr[row][column]=1;
        for(int moves=0;moves<k;moves++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(curr[i][j]!=0){
                        int x=0;
                        int y=0;
                        x=i-2;
                        y=j+1;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i-1;
                        y=j+2;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i+1;
                        y=j+2;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i+2;
                        y=j+1;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i+2;
                        y=j-1;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i+1;
                        y=j-2;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i-1;
                        y=j-2;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                        x=i-2;
                        y=j-1;
                        if(isValid(x,y,n)){
                            next[x][y]+=curr[i][j]/8.00;
                        }
                    }
                }
            }
            curr=next;
            vector<vector<double>> reallocate(n,vector<double> (n,0));
            next=reallocate;
        }
        double sum=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                sum+=curr[i][j];
            }
        }
        return sum;
    }
};
