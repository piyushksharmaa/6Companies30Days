#define ll long long
class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<ll,ll>> adj[n];
        for(int i=0;i<roads.size();i++){
            adj[roads[i][0]].push_back({roads[i][1],roads[i][2]});
            adj[roads[i][1]].push_back({roads[i][0],roads[i][2]});
        }
        priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>> pq; 
        vector<ll> dist(n,LONG_MAX);
        vector<ll> ways(n,0);
        dist[0]=0;
        ways[0]=1;
        pq.push({0,0});
        int mod=(1e9+7);
        while(!pq.empty()){
            ll dis=pq.top().first;
            ll node=pq.top().second;
            pq.pop();
            for(auto it: adj[node]){
                ll adjacent_node=it.first;
                ll edge_weight=it.second;
                // This is the first time i am coming with this short distance
                if((dis+edge_weight)<dist[adjacent_node]){
                    dist[adjacent_node]=(dis+edge_weight);
                    pq.push({(dis+edge_weight),adjacent_node});
                    ways[adjacent_node]=ways[node];
                }
                else if((dis+edge_weight)==dist[adjacent_node]){
                    ways[adjacent_node]=(ways[adjacent_node]+ways[node])%mod;
                }
            }
        }
        return ways[n-1]%mod;
    }
};
